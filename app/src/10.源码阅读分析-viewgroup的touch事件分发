1.View事件分发的回顾

    onTouchListener（返回false） -> onTouchEvent -> onClickListener
    onTouchListener如果返回true只会执行onTouchListener

2.ViewGroup的事件分发
    dispatchTouchEvent()

    onInterceptTouchEvent()

    onTouchEvent()

    2.1正常情况下

    第一次DOWN:ViewGroup.dispatchTouchEvent事件分发 ->ViewGroup.onInterceptTouchEvent->
                View.dispatchTouchEvent事件分发(View.onTouch(onTouchListener)->View.onTouchEvent)

    第二次MOVE:ViewGroup.dispatchTouchEvent->ViewGroup.onInterceptTouchEvent-> ->
                View.dispatchTouchEvent事件分发(View.onTouch(onTouchListener)->View.onTouchEvent)

    第三次UP:ViewGroup.dispatchTouchEvent->ViewGroup.onInterceptTouchEvent-> ->
                View.dispatchTouchEvent事件分发(View.onTouch(onTouchListener)->View.onTouchEvent) ->View.OnClickListener

    2.2 onClick没有 理解没有消费事件

    ViewGroup.dispatchTouchEvent->ViewGroup.onInterceptTouchEvent-> ->
                    View.dispatchTouchEvent事件分发(View.onTouch(onTouchListener)->View.onTouchEvent)->ViewGroup.onTouchEvent

    2.3 在View 的onTouchEvent()方法里面返回true的情况下

    第一次DOWN:ViewGroup.dispatchTouchEvent事件分发 ->ViewGroup.onInterceptTouchEvent->
                    View.dispatchTouchEvent事件分发(View.onTouch(onTouchListener)->View.onTouchEvent)

    第二次MOVE:ViewGroup.dispatchTouchEvent->ViewGroup.onInterceptTouchEvent-> ->
                View.dispatchTouchEvent事件分发(View.onTouch(onTouchListener)->View.onTouchEvent)

    第三次UP:ViewGroup.dispatchTouchEvent->ViewGroup.onInterceptTouchEvent-> ->
                View.dispatchTouchEvent事件分发(View.onTouch(onTouchListener)->View.onTouchEvent)

    2.4 在viewgroup的onInterceptTouchEvent()方法里面返回true的情况下

    ViewGroup.dispatchTouchEvent事件分发 ->ViewGroup.onInterceptTouchEvent->ViewGroup.onTouchEvent

3.ViewGroup的源码分析

    dispatchTouchEvent()事件分发

        final int action = ev.getAction();
        final int actionMasked = action & MotionEvent.ACTION_MASK;

        // Handle an initial down.
        if (actionMasked == MotionEvent.ACTION_DOWN) {
            // Throw away all previous state when starting a new touch gesture.
            // The framework may have dropped the up or cancel event for the previous gesture
            // due to an app switch, ANR, or some other state change.
            //清除
            cancelAndClearTouchTargets(ev);
            resetTouchState();
        }

        /**
         * Clears all touch targets.
         */
        private void clearTouchTargets() {
            TouchTarget target = mFirstTouchTarget;
            if (target != null) {
                do {
                    TouchTarget next = target.next;
                    target.recycle();
                    target = next;
                } while (target != null);
                mFirstTouchTarget = null;//这句话是核心
            }
        }


        DOWN事件正常情况下会触发

        intercepted = onInterceptTouchEvent(ev);
        onInterceptTouchEvent(MotionEvent ev)   默认返回false

        if (!canceled && !intercepted) {    默认情况下 if 能够执行

            if (newTouchTarget == null && childrenCount != 0) {//DOWN 会执行

                for (int i = childrenCount - 1; i >= 0; i--) {//反序的for循环 获取子view
                    if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {

                        newTouchTarget = addTouchTarget(child, idBitsToAssign);//如果子view返回true就会进来 主要给mFirstTouchTarget = target;赋值

                    }
                }
            }

        }

        private boolean dispatchTransformedTouchEvent(MotionEvent event, boolean cancel,
                    View child, int desiredPointerIdBits) {
            ...
            // Canceling motions is a special case.  We don't need to perform any transformations
            // or filtering.  The important part is the action, not the contents.
            final int oldAction = event.getAction();
            if (cancel || oldAction == MotionEvent.ACTION_CANCEL) {
                event.setAction(MotionEvent.ACTION_CANCEL);
                if (child == null) {
                    //会调用自己的 super View.dispatchTouchEvent(event)
                    handled = super.dispatchTouchEvent(event);
                } else {
                    //如果child不是空，会调用 child 的dispatchTouchEvent(event)
                    handled = child.dispatchTouchEvent(event);
                }
                event.setAction(oldAction);
                return handled;
            }
            ...
        }

    onInterceptTouchEvent(MotionEvent ev) 事件拦截

    onTouchEvent 事件触摸

    如果说子View没有一个地方返回 true，只会进入一次,只会响应DOWN事件，代表不需要消费该事件,如果你想响应MOVE,UP 必须找个地方返回true;

    对于viewgroup来讲,如果想拦截子View的onTouch事件，可以复写onInterceptTouchEvent() 返回 true即可，
    如果说onInterceptTouchEvent返回true，会执行viewgroup的onTouchEvent,
    如果子View没有消费touch事件,也会调用该viewgroup的 onTouchEvent方法




